/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {

/** @page building-corrade Downloading and building
@brief Guide how to download and build Corrade on different platforms.

@tableofcontents

Minimal set of tools required for building is:

-   C++ compiler with good C++11 support. Compilers which are tested to have
    everything needed are **GCC** >= 4.7, **Clang** >= 3.1 and **MSVC** 2015.
    On Windows you can also use **MinGW-w64**. GCC 4.6, 4.5, 4.4 and MSVC 2013
    support involves some ugly workarounds and thus is available only in
    `compatibility` branch.
-   **CMake** >= 2.8.9

Note that full feature set is available only on GCC >= 4.8.1 and Clang >= 3.1
and compatibility mode with reduced feature set is used on other compilers.

@section building-corrade-download Downloading the sources

The source is available on GitHub: https://github.com/mosra/corrade. Clone the
repository with your favorite IDE or Git GUI, download currrent snapshot as
compressed archive or use the command line:

    git clone git://github.com/mosra/corrade.git

If you need to use the `compatibility` branch, check it out as following from
the cloned repository or download the particular archive from
https://github.com/mosra/corrade/tree/compatibility.

    git checkout compatibility

@section building-corrade-compilation Compilation, installation

@subsection building-corrade-cmake CMake primer

Corrade uses CMake as build system and expects it to be used also in depending
projects. If you are familiar enough with it, you can skip this section and go
straight to building. Otherwise be sure to read this so you don't get lost
later.

CMake is meta-build system, which means that it generates platform-specific
build files which then need to be processed (e.g. on Linux it generates
Makefiles which are then processed with `make`).

The most straightforward way to use CMake is via command-line. First create
build directory, then run `cmake` in it, with parameter specifying where root
`CMakeLists.txt` and then run the actual build command. You can either use the
platform-specific tool (like `make`) or use platform-independent `cmake --build`:

    mkdir build && cd build
    cmake ..
    cmake --build .

Or you can use some IDE, for example QtCreator. Open project's root
`CMakeLists.txt` file within it, QtCreator then asks you where to create build
directory, allows you to specify initial CMake parameters and then you can just
press Configure and everything is ready to be built.

Corrade build is controlled using plenty of configuration variables, which are
@ref building-corrade-features "listed and described below". The variables can
be specified either on command-line with `-Dname=value`, for example:

    cmake -DBUILD_TESTS=ON ..

Boolean variables accept `ON`, `OFF`, `True` or `False`. If using QtCreator,
you can enter `-Dname=value` into *Arguments* field when running CMake. You can
also use CMake GUI for more convenient variable specification. You can run it
from command-line, pointing it to your build dir:

    cd build
    cmake-gui .

Or you can start it as is common on your system and then point it to the build
dir. It will then select the source dir automatically and populates list of
available configuration variables. Each configuration variable provided by
Corrade is documented (hover on it to see the tooltip). After configuring,
press *Configure* and *Generate* and you are ready to build the project using
your platform's build system. If you are using QtCreator, it will detect the
changes afterwards and reparse the project accordingly, so you don't need to
re-run CMake from within it.

The variables can also be modified directly by editing `CMakeCache.txt` in
build dir, although that is the least recommended way.

@subsection building-corrade-linux Via command-line (on Linux/Unix)

On Unix-based OSs, the library can be built and installed using these four
commands:

    mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=/usr ..
    make
    make install

If using older compiler, you might need to enable compatibility mode to pass
the CMake configuration step -- see @ref building-corrade-features "below" for
additional configuration options.

If you plan to install the library to non-standard location (other than `/usr`,
e.g. `/home/xyz/projects`) you might want to set `CMAKE_INSTALL_RPATH` to
`lib/` subdir (thus `/home/xyz/projects/lib`) so the dynamic libraries can be
found at runtime.

@subsection building-corrade-windows Building on Windows

On Windows you can use either MSVC or MinGW-w64 compiler. It's then up to you
whether you will use QtCreator, Visual Studio or do the build from command-
line. Note that for most convenient usage it's best use some dedicated
directory (e.g. `C:/Sys`) for installing dependencies instead of putting each
dependency to its own directory in `C:/Program Files`. Then add its `bin/`
subdir (e.g. `C:/Sys/bin`) to PATH so all the DLLs are found when running the
executables. If you are using MinGW-w64, the `C:/MinGW` directory is in most
cases already prepared for exactly this.

Then, when running CMake, set `CMAKE_INSTALL_PREFIX` value to that directory
(e.g. `-DCMAKE_INSTALL_PREFIX=C:/Sys`).

@subsubsection building-corrade-windows-msvc Using Visual Studio

On Windows CMake by default creates Visual Studio project files.

The most straightforward way to build and install the library is again via the
command-line. The bonus point is that you don't even need to wait for Visual
Studio to load:

    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX="C:/Sys" ..
    cmake --build .
    cmake --build . --target install

If you want to build and install from Visual Studio, just open the `Corrade.sln`
project file generated by CMake in the build directory.

@subsubsection building-corrade-windows-qtcreator Using QtCreator

On Windows you can also use QtCreator (just QtCreator, you don't need the full
Qt SDK). Configure it to use CMake and either MSVC compiler or MinGW-w64 and
then just open project's root `CMakeLists.txt` file within it. QtCreator then
asks you where to create build directory, allows you to specify initial CMake
parameters (e.g. `CMAKE_PREFIX_PATH` and `CMAKE_INSTALL_PREFIX`) and then you
can just press *Configure* and everything is ready to be built.

After the initial import you might want to reconfigure some CMake variables,
see @ref building-corrade-features "below" for more information.

Installation to given prefix can be done from within QtCreator by adding new
`make install` build rule.

@subsection building-corrade-features Enabling or disabling features

The libraries are build as shared by default. If you are developing for
platform which doesn't support shared libraries or if you just want to link
them statically, enable `BUILD_STATIC` to build the libraries as static. If you
plan to use them with shared libraries later, enable also position-independent
code with `BUILD_STATIC_PIC`. If you want to build with another compiler (e.g.
Clang), pass `-DCMAKE_CXX_COMPILER=clang++` to CMake.

Libraries built in `Debug` configuration (e.g. with `CMAKE_BUILD_TYPE` set to
`Debug`) have `-d` suffix to make it possible to have both debug and release
libraries installed alongside each other. Headers and other files are the same
for both. This distinction is handled automatically when using the library in
depending projects, see @ref corrade-cmake for more information.

By default the library expects standards conforming compiler. However, for
portability, compatibility mode for older compilers is provided. The build
system tries to autodect it, but in some rare cases you may need to enable
the compatibility mode explicitly:

- `GCC47_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.7. Note that you need to enable this explicitly also if you are building
  with Clang and use libstdc++ from GCC 4.7.
- `GCC46_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.6. Note that GCC 4.6 support is maintained only in `compatibility` branch.
- `GCC45_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.5. Note that GCC 4.5 support is maintained only in `compatibility` branch.
- `GCC44_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.4. Note that GCC 4.4 support is maintained only in `compatibility` branch.
- `MSVC2013_COMPATIBILITY` -- Enable for compiling with compatibility more for
  Microsoft Visual C++ 2013. Note that MSVC 2013 support is maintained only in
  `compatibility` branch.

Corrade will detect the compiler used and refuses to build (or be used) if
some compatibility mode needs to be enabled. On the other hand, if any of these
is enabled, Corrade will refuse to build (or be used) with any newer compiler.

The library is constantly evolving and thus some APIs are deprecated and then
later removed in favor of better ones. To preserve backwards compatibility,
Corrade is by default built with all deprecated APIs. However, to make your
code more robust and future-proof, it's recommended to build the library with
`BUILD_DEPRECATED` disabled.

If building for Xcode on OSX or iOS, `TESTSUITE_TARGET_XCTEST` option can be
used to build unit tests compatible with the XCTest framework and thus runnable
directly from Xcode and also in iOS simulator.

The features used can be conveniently detected in depending projects both in
CMake and C++ sources, see @ref corrade-cmake and @ref Corrade/Corrade.h for
more information.

Note that [each namespace](namespaces.html) contains more detailed guide how to
use given library with CMake.

@subsection building-corrade-tests Building and running unit tests

If you want to build also unit tests (which are not built by default), enable
`BUILD_TESTS` in CMake. Unit tests use Corrade's own @ref Corrade::TestSuite "TestSuite"
framework and can be run either manually (the binaries are located in `Test/`
subdirectories of build directory) or using

    ctest --output-on-failure

in build directory. On Windows the tests require the library to be installed
with DLLs accessible through `PATH`. See
@ref building-corrade-windows "above Windows documentation" for more
information.

@subsection building-corrade-doc Building documentation

The documentation (which you are currently reading) is written in **Doxygen**
(preferrably >=1.8 with Markdown support, but older versions should do good job
too). The documentation can be build by running

    doxygen

in root directory (i.e. where `Doxyfile` is). Resulting HTML documentation
will be in `build/doc/` directory. You might need to create `build/` directory
if it doesn't exist yet.

@subsection building-corrade-examples Building examples

The library comes with handful of examples, contained in `examples/`
directory. Documentation for them is available on page @ref corrade-example-index.
The examples require Corrade to be installed and they are built separately:

    mkdir build-examples && cd build-examples
    cmake ../examples
    cmake --build .

@section building-corrade-packages Prepared packages

@subsection building-corrade-packages-arch ArchLinux packages

In `package/archlinux` directory are three packages - one for stable version,
one for Git development build and one for building under MinGW-w64. The packages
are also in AUR under the same names.

There are also a few development PKGBUILDs in `package/archlinux`, which allow
you to build and install the package directly from source tree without
downloading anything. The native PKGBUILDs also contain `check()` function
which will run all unit tests before packaging.

@subsection building-corrade-packages-gentoo Gentoo ebuilds

Gentoo Git ebuild is available in `package/gentoo` directory.

@subsection building-corrade-packages-rpm RPM packages

Every package contains `spec` files for RPM-based distributions in
`package/rpm/` directory. In addition you will need `rpm-build` package
and `~/.rpmmacros` file, which contains at least this:

    %_topdir /directory/where/to/store/rpms
    %_tmppath /directory/where/to/do/compilation
    %packager Your Name <your@email.com>

First you need to download or create source tarball. Source tarball can
be downloaded from GitHub (URL is in spec file), or in subdirectory `package/`
there is an script `make-github-like-archive.sh`, which generates exactly the
same tarballs.

The downloaded or generated tarball must be moved or copied to
`%{_topdir}/SOURCES` directory, so `rpmbuild` can find it.

When you have the sources, go to `package/rpm/` directory and run this:

    rpmbuild -bb corrade.spec

This will compile and generate library and development RPM for Corrade in
`%{_topdir}/RPMS`.

@subsection building-corrade-packages-deb DEB packages

There is also `package/debian/` directory with all files needed for building
Debian packages. In addition you will need `dpkg-dev` and `debhelper` packages.
Building is easy, just change directory to package root, link or copy
`package/debian` directory there and run `dpkg-buildpackage`:

    ln -s package/debian .
    dpkg-buildpackage

This will compile binary and development packages, which will then appear in
parent directory. If you need to specify some additional CMake flags, modify
the last line in `debian/rules`, e.g.:

    dh_auto_configure -- -DBUILD_STATIC=ON

@subsection building-corrade-packages-brew Homebrew formulas

OS X Homebrew formulas are in `package/homebrew` directory. Download the `*.rb`
file, put it into your Formulas directory and install it using the following
command:

    brew install --HEAD corrade

@section building-corrade-cross Crosscompiling

For crosscompiling you need to have native version of Corrade installed,
because Corrade needs to run `corrade-rc` utility on the host system as part
of the build process. If native version of `corrade-rc` is not found on the
system, Corrade will refuse to crosscompile.

You also need to have the toolchains submodule updated. Either run the
following commands, or, if you build from source archive, download snapshot of
toolchains repository from https://github.com/mosra/toolchains and put the
contents in `toolchains/` subdirectory.

    git submodule init
    git submodule update

@subsection building-corrade-cross-winrt Crosscompiling for Windows RT

As said above, you need native build of `corrade-rc` executable. The below
script assumes that native Corrade build is installed in `C:/Sys` and the
installation path for WinRT is in `C:/Sys-winrt`. You need at least Windows
8.1, Visual Studio 2013 and Windows 8.1 Store/Phone SDK installed. Because
WinRT applications run in a sandbox, it's recommended to build the library as
static so you don't have to bundle all the DLLs. Example:

    mkdir build-winrt
    cd build-winrt
    cmake -DCORRADE_RC_EXECUTABLE="C:/Sys/bin/corrade-rc.exe" -DCMAKE_INSTALL_PREFIX="C:/Sys-winrt" -DBUILD_STATIC=ON -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=8.1 -G "Visual Studio 14 2015" ..
    cmake --build .

Change `WindowsStore` to `WindowsPhone` if you want to build for Windows Phone
instead. When done, you can install the package using `cmake --build . --target install`
to make it available for depending projects.

@subsection building-corrade-cross-win Crosscompiling for Windows using MinGW-w64

@note This guide is tailored mainly for crosscompiling from ArchLinux. For
    this system there is also prepared `mingw-w64-corrade` development package
    in `package/archlinux`, named `PKGBUILD-mingw-w64`. See
    @ref building-corrade-packages-arch "above" for more information.

You will need MinGW-w64 version of the compiler and libraries, i.e. this
ArchLinux package:

- `mingw-w64-gcc`

Then create build directories for 32b/64b build and run cmake and build command
in them. You may need to modify the `basic-mingw-w64-32.cmake`/`basic-mingw-w64-64.cmake`
files and `CMAKE_INSTALL_PREFIX` to suit your distribution filesystem
hierarchy.

    mkdir build-mingw-w64-32 && cd build-mingw-w64-32
    cmake .. \
        -DCMAKE_TOOLCHAIN_FILE=../toolchains/archlinux/basic-mingw-w64-32.cmake \
        -DCMAKE_INSTALL_PREFIX=/usr/i686-w64-mingw32
    cmake --build .

    mkdir build-mingw-w64-64 && cd build-mingw-w64-64
    cmake .. \
        -DCMAKE_TOOLCHAIN_FILE=../toolchains/archlinux/basic-mingw-w64-64.cmake \
        -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32
    cmake --build .

Then you can install the package using `cmake --build . --target install` to
make it available for depending projects.

@subsection building-corrade-cross-nacl Crosscompiling for Google Chrome Native Client

You will need [Native Client SDK](https://developers.google.com/native-client/beta/sdk/download).
Minimal supported version is `pepper_25`.

You can choose from either `glibc` or `newlib` toolchain. `Newlib` supports
only static linking, thus `BUILD_STATIC` is implicitly enabled. Don't forget to
adapt `NACL_PREFIX` variable in `generic/NaCl-*-x86-32.cmake` and
`generic/NaCl-*-x86-64.cmake` to path where your SDK is installed. Default is
`/usr/nacl`. You may need to adapt also `NACL_TOOLCHAIN_PATH` so CMake is able
to find the compiler.

Then create build directories for x86-32 and x86-64 and run cmake and build
command in them. The toolchains need access to the platform file, so be sure to
properly set **absolute** path to `modules/` directory containing
`Platform/NaCl.cmake`. Also adapt `CMAKE_INSTALL_PREFIX` to the same value as
in `NACL_PREFIX` in toolchain file.

    mkdir build-nacl-x86-32 && cd build-nacl-x86-32
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/NaCl-newlib-x86-32.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/nacl \
        -DLIB_SUFFIX=/32
    cmake --build .

    mkdir build-nacl-x86-64 && cd build-nacl-x86-64
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/NaCl-newlib-x86-64.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/nacl
    cmake --build .

Then you can install both versions using `cmake --build . --target install` to
make them available for depending projects. The headers are shared by both
versions.

For ArchLinux there are also prepared package files in `package/archlinux`,
named `PKGBUILD-nacl-glibc` and `PKGBUILD-nacl-newlib`, see
@ref building-corrade-packages-arch "above" for more information.

@subsection building-corrade-cross-emscripten Crosscompiling for Emscripten

You will need [Emscripten](https://github.com/kripken/emscripten/wiki/Tutorial)
installed and configured.

Don't forget to adapt `EMSCRIPTEN_PREFIX` variable in `generic/Emscripten.cmake`
to path where Emscripten is installed. Default is `/usr/lib/emscripten`.
Emscripten supports dynamic libraries only to simplify porting and they are
generally slower, thus `BUILD_STATIC` is implicitly enabled.

Then create build directory and run cmake and build command in it. The
toolchain needs access to its platform file, so be sure to properly set **absolute**
path to `modules/` directory containing `Platform/Emscripten.cmake`. Also set
`CMAKE_INSTALL_PREFIX` to path contained in `EMSCRIPTEN_TOOLCHAIN_PATH`.

    mkdir build-emscripten && cd build-emscripten
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Emscripten.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/lib/emscripten/system
    cmake --build .

Then you can install the library using `cmake --build . --target install` to
make it available for depending projects.

If you have Node.js installed, you can also build and run unit tests using
`ctest`. See `BUILD_TESTS` above.

For ArchLinux there is also prepared package file in `package/archlinux`,
named `PKGBUILD-emscripten`, see @ref building-corrade-packages-arch "above"
for more information.

@subsection building-corrade-cross-ios Crosscompiling for iOS

You will need OSX and Xcode installed.

Set `CMAKE_OSX_ROOT` to SDK you want to target and enable all desired
architectures in `CMAKE_OSX_ARCHITECTURES`. The toolchain needs access to its
platform file, so be sure to properly set **absolute** path to `modules/`
directory containing `Platform/iOS.cmake`. Set `CMAKE_INSTALL_PREFIX` to prefix
where you want to store your iOS dependencies for other projects.

As every application is in its own sandbox, it doesn't make sense to build
shared libraries (although it is supported). Enable `BUILD_STATIC` to build
static libraries.

    mkdir build-ios && cd build-ios
    cmake .. \
        -DCMAKE_MODULE_PATH=/absolute/path/to/toolchains/modules/ \
        -DCMAKE_TOOLCHAIN_FILE=../toolchains/generic/iOS.cmake \
        -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk \
        -DCMAKE_OSX_ARCHITECTURES="arm64;armv7;armv7s" \
        -DCMAKE_INSTALL_PREFIX=~/ios-libs \
        -DBUILD_STATIC=ON -G Xcode
    cmake --build .

Then you can install the library using `cmake --build . --target install` to
make it available for depending projects.

@subsection building-corrade-cross-android Crosscompiling for Android ARM and x86

You will need [Android NDK](https://developer.android.com/tools/sdk/ndk/index.html)
installed and configured.

Don't forget to adapt `ANDROID_NDK_ROOT` in `generic/Android-*.cmake` to path
where NDK is installed. Default is `/opt/android-ndk`. Adapt also
`ANDROID_SYSROOT` to your preferred API level. You might also need to update
`ANDROID_TOOLCHAIN_PREFIX` and `ANDROID_TOOLCHAIN_ROOT` to fit your system.

Then create build directory and run cmake and build command in it. The
toolchain needs access to its platform file, so be sure to properly set **absolute**
path to `modules/` directory containing `Platform/Android.cmake`. Also set
`CMAKE_INSTALL_PREFIX` to `/usr` subdirectory of `ANDROID_SYSROOT`.

Note that `BUILD_STATIC` is implicitly enabled, because manually loading all
depending shared libraries using JNI would be too inconvenient.

    mkdir build-android-arm && cd build-android-arm
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Android-ARM.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/opt/android-ndk/platforms/android-19/arch-arm/usr
    cmake --build .

    mkdir build-android-x86 && cd build-android-x86
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Android-x86.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/opt/android-ndk/platforms/android-19/arch-x86/usr
    cmake --build .

Then you can install both versions using `cmake --build . --target install` to
make them available for depending projects.

For ArchLinux there are also prepared package files in `package/archlinux`,
named `PKGBUILD-android-arm` and `PKGBUILD-android-x86`, see
@ref building-corrade-packages-arch "above" for more information.

@section building-corrade-ci Continuous Integration

@subsection building-corrade-ci-travis Travis

In `package/ci/` there is `travis.yml` file with Linux GCC 4.7 and OSX Clang
configuration. Online at https://travis-ci.org/mosra/corrade.

@subsection building-corrade-ci-appveyor AppVeyor

In `package/ci/` there is `appveyor.yml` file with Windows MSVC configuration.
Online at https://ci.appveyor.com/project/mosra/corrade.

@subsection building-corrade-ci-jenkins Jenkins

In `package/ci/` there is `jenkins.xml` file containing job configuration.
Setup your Jenkins server, enable the **Git** and **Text-finder** plugin and
download the CLI application from here (replace `localhost:8080` with your
server name):

    http://localhost:8080/cli

Then add new job or update existing one (update path to the `*.jar` file,
replace `localhost:8080` with your server name, replace `update-job` with
`create-job` if the job doesn't exist yet).

    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade < package/ci/jenkins.xml

Build is done using **Ninja** build system. It expects that **GCC** >=4.9, 4.8,
4.7 and **Clang** are installed as it tries to compile the library with each
one of them. You can add/remove the compilers in `axes/hudson.matrix.TextAxis`
or via the web interface later.

Clang Analyzer and *Sanitizer checks are also available. They both require
**Clang**, Analyzer job additionally requires **clang-analyzer** tool.

    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-ClangAnalyzer < package/ci/jenkins-clang-analyzer.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-ClangSanitizer < package/ci/jenkins-clang-sanitizer.xml

There is also MinGW-w64, Emscripten, NaCl and Android configuration, add or
update them with the commands below. See @ref building-corrade-cross for more
information about setting up the crosscompilers and `toolchains/` submodule.
For Emscripten you need also **Node.js** installed to run the tests.

    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-MinGW-w64 < package/ci/jenkins-mingw-w64.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-Emscripten < package/ci/jenkins-emscripten.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-NaCl < package/ci/jenkins-nacl.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job Corrade-Android < package/ci/jenkins-android.xml

*/

}
