/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {
/** @page corrade-cmake Usage with CMake
@brief Guide how to find and use Corrade with CMake build system

Corrade uses CMake build system for both building and integration into your
projects. The logic is in module `FindCorrade.cmake` distributed with the
library in `modules/` directory, you are encouraged to copy it into your
project and add path to the file to `CMAKE_MODULE_PATH`. Otherwise, if CMake
won't be able to find this file in predefined locations, it will error out even
if Corrade might be installed on the system.

Note that the module file is updated as the library evolves, you are encouraged
to update your copy from time to time to avoid strange building issues.

If you installed the library to non-standard location (other than `/usr`, e.g.
`/home/xyz/projects`), set `CMAKE_PREFIX_PATH` to that directory to help CMake
find it.

Basic usage is:

    find_package(Corrade REQUIRED)

This module tries to find the base Corrade library and then defines the
following:

-   `Corrade_FOUND` -- Whether the base library was found
-   `CORRADE_LIB_SUFFIX_MODULE` -- Path to `CorradeLibSuffix.cmake` module,
    which tries to autodetect value of `LIB_SUFFIX` variable

This command will try to find only the base library, not the optional
components, which are:

-   `Containers` -- @ref Containers library
-   `PluginManager` -- @ref PluginManager library
-   `TestSuite` -- @ref TestSuite library
-   `Utility` -- @ref Utility library
-   `rc` -- `corrade-rc` executable

Example usage with specifying additional components is:

    find_package(Corrade REQUIRED Utility TestSuite)

For each component is then defined:

-   `Corrade_*_FOUND` -- Whether the component was found
-   `Corrade::*` -- Component imported target

The package is found if either debug or release version of each library is
found. If both debug and release libraries are found, proper version is chosen
based on actual build configuration of the project (i.e. `Debug` build is
linked to debug libraries, `Release` build to release libraries).

Corrade conditionally defines `CORRADE_IS_DEBUG_BUILD` preprocessor variable in
case build configuration is `Debug` (not Corrade itself, but build
configuration of the project using it). Useful e.g. for selecting proper plugin
directory.

Corrade defines the following custom target properties:

-   `CORRADE_CXX_STANDARD` -- C++ standard to require when *compiling* given
    target. Does nothing if `CMAKE_CXX_FLAGS` already contains particular
    standard setting flag or if given target contains `CMAKE_CXX_STANDARD`
    property. Allowed value is `11`.
-   `INTERFACE_CORRADE_CXX_STANDARD` -- C++ standard to require when *using*
    given target. Does nothing if :variable:`CMAKE_CXX_FLAGS` already contains
    particular standard setting flag or if given target contains
    `CMAKE_CXX_STANDARD` property. Allowed value is `11`.
-   `CORRADE_USE_PEDANTIC_FLAGS` -- Enable additional compiler/linker flags.
    Boolean.

These properties are inherited from directory properties, meaning that if you
set them on directories, they get implicitly set on all targets in given
directory (with a possibility to do target-specific overrides). All Corrade
libraries have the `INTERFACE_CORRADE_CXX_STANDARD` property set to `11`,
meaning that you will always have at least C++11 enabled once you link to any
Corrade library.

Features of found Corrade library are exposed in these variables, they are
also available as preprocessor variables if you include
@ref Corrade/Corrade.h "Corrade/Corrade.h":

-   `CORRADE_GCC47_COMPATIBILITY` -- Defined if compiled with compatibility
    mode for GCC 4.7
-   `CORRADE_MSVC2015_COMPATIBILITY` -- Defined if compiled with compatibility
    mode for MSVC 2015
-   `CORRADE_BUILD_DEPRECATED` -- Defined if compiled with deprecated APIs
    included
-   `CORRADE_BUILD_STATIC` -- Defined if compiled as static libraries. Default
    are shared libraries.
-   `CORRADE_TARGET_UNIX` -- Defined if compiled for some Unix flavor (Linux,
    BSD, OS X)
-   `CORRADE_TARGET_APPLE` -- Defined if compiled for Apple platforms
-   `CORRADE_TARGET_IOS` -- Defined if compiled for iOS
-   `CORRADE_TARGET_WINDOWS` -- Defined if compiled for Windows
-   `CORRADE_TARGET_WINDOWS_RT` -- Defined if compiled for Windows RT
-   `CORRADE_TARGET_NACL` -- Defined if compiled for Google Chrome Native
    Client
-   `CORRADE_TARGET_NACL_NEWLIB` -- Defined if compiled for Google Chrome
    Native Client with `newlib` toolchain
-   `CORRADE_TARGET_NACL_GLIBC` -- Defined if compiled for Google Chrome Native
    Client with `glibc` toolchain
-   `CORRADE_TARGET_EMSCRIPTEN` -- Defined if compiled for Emscripten
-   `CORRADE_TARGET_ANDROID` -- Defined if compiled for Android

Workflows without imported targets are deprecated and the following variables
are included just for backwards compatibility and only if
@ref CORRADE_BUILD_DEPRECATED is enabled:

-   `CORRADE_*_LIBRARIES` -- Expands to `Corrade::*` target. Use `Corrade::*`
    target directly instead.
-   `CORRADE_CXX_FLAGS` -- Additional pedantic compile flags. Use
    `CORRADE_USE_PEDANTIC_CXX` per-target property or
    `CORRADE_PEDANTIC_CXX_OPTIONS` list variable instead.

Note that [each namespace](namespaces.html) contains more detailed guide how to
use given library with CMake.

Corrade provides these macros and functions:

### Add unit test using Corrade's TestSuite
@anchor corrade-cmake-add-test

    corrade_add_test(<test name>
                     <sources>...
                     [LIBRARIES <libraries>...])

Test name is also executable name. You can also specify libraries to link with
instead of using target_link_libraries(). `Corrade::TestSuite` targer is linked
automatically to each test. Note that the `enable_testing()` function must be
called explicitly.

### Compile data resources into application binary
@anchor corrade-cmake-add-resource

    corrade_add_resource(<name> <resources.conf>)

Depends on corrade-rc, which is part of Corrade utilities. This command
generates resource data using given configuration file in current build
directory. Argument name is name under which the resources can be explicitly
loaded. Variable `name` contains compiled resource filename, which is then
used for compiling library / executable. Example usage:

    corrade_add_resource(app_resources resources.conf)
    add_executable(app source1 source2 ... ${app_resources})

### Add dynamic plugin
@anchor corrade-cmake-add-plugin

    corrade_add_plugin(<plugin name>
                       <debug install dir> <release install dir>
                       <metadata file>
                       <sources>...)

The macro adds preprocessor directive `CORRADE_DYNAMIC_PLUGIN`. Additional
libraries can be linked in via `target_link_libraries(plugin_name ...)`. If
`<debug install dir>` is set to `CMAKE_CURRENT_BINARY_DIR` (e.g. for testing
purposes), the files are copied directly, without the need to perform install
step. Note that the files are actually put into configuration-based
subdirectory, i.e. `${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}`. See
documentation of `CMAKE_CFG_INTDIR` variable for more information.

### Add static plugin
@anchor corrade-cmake-add-static-plugin

    corrade_add_static_plugin(<plugin name>
                              <install dir>
                              <metadata file>
                              <sources>...)

The macro adds preprocessor directive `CORRADE_STATIC_PLUGIN`. Additional
libraries can be linked in via `target_link_libraries(plugin_name ...)`. If
`<install dir>` is set to `CMAKE_CURRENT_BINARY_DIR` (e.g. for testing
purposes), no installation rules are added.
@attention Plugins built in debug configuration (e.g. with `CMAKE_BUILD_TYPE`
    set to `Debug`) have `-d` suffix to make it possible to have both debug and
    release plugins installed alongside each other.

### Find corresponding DLLs for library files
@anchor corrade-find-dlls-for-libs

    corrade_find_dlls_for_libs(<output variable> <libs>...)

Available only on Windows, for all `*.lib` files tries to find corresponding
DLL file. Useful for bundling dependencies for e.g. WinRT packages.

*/
}
